/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalRipDSLParser;
import org.xtext.services.RipDSLGrammarAccess;

public class RipDSLParser extends AbstractContentAssistParser {

	@Inject
	private RipDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRipDSLParser createParser() {
		InternalRipDSLParser result = new InternalRipDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMethodAccess().getAlternatives(), "rule__Method__Alternatives");
					put(grammarAccess.getAPIRestAccess().getGroup(), "rule__APIRest__Group__0");
					put(grammarAccess.getCommandRestAccess().getGroup(), "rule__CommandRest__Group__0");
					put(grammarAccess.getCommandRestAccess().getGroup_8(), "rule__CommandRest__Group_8__0");
					put(grammarAccess.getCommandRestAccess().getGroup_8_4(), "rule__CommandRest__Group_8_4__0");
					put(grammarAccess.getCommandRestAccess().getGroup_9(), "rule__CommandRest__Group_9__0");
					put(grammarAccess.getCommandRestAccess().getGroup_9_4(), "rule__CommandRest__Group_9_4__0");
					put(grammarAccess.getCommandRestAccess().getGroup_10(), "rule__CommandRest__Group_10__0");
					put(grammarAccess.getCommandRestAccess().getGroup_11(), "rule__CommandRest__Group_11__0");
					put(grammarAccess.getCommandRestAccess().getGroup_11_4(), "rule__CommandRest__Group_11_4__0");
					put(grammarAccess.getCommandRestAccess().getGroup_12(), "rule__CommandRest__Group_12__0");
					put(grammarAccess.getCommandRestAccess().getGroup_12_4(), "rule__CommandRest__Group_12_4__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_6(), "rule__Parameter__Group_6__0");
					put(grammarAccess.getResponseAccess().getGroup(), "rule__Response__Group__0");
					put(grammarAccess.getResponseAccess().getGroup_2(), "rule__Response__Group_2__0");
					put(grammarAccess.getAPIRestAccess().getHostAssignment_3(), "rule__APIRest__HostAssignment_3");
					put(grammarAccess.getAPIRestAccess().getPortAssignment_6(), "rule__APIRest__PortAssignment_6");
					put(grammarAccess.getAPIRestAccess().getCommandsAssignment_9(), "rule__APIRest__CommandsAssignment_9");
					put(grammarAccess.getCommandRestAccess().getNameAssignment_0(), "rule__CommandRest__NameAssignment_0");
					put(grammarAccess.getCommandRestAccess().getMethodAssignment_4(), "rule__CommandRest__MethodAssignment_4");
					put(grammarAccess.getCommandRestAccess().getPathAssignment_7(), "rule__CommandRest__PathAssignment_7");
					put(grammarAccess.getCommandRestAccess().getEntryFormatsAssignment_8_3(), "rule__CommandRest__EntryFormatsAssignment_8_3");
					put(grammarAccess.getCommandRestAccess().getEntryFormatsAssignment_8_4_1(), "rule__CommandRest__EntryFormatsAssignment_8_4_1");
					put(grammarAccess.getCommandRestAccess().getOutputFormatsAssignment_9_3(), "rule__CommandRest__OutputFormatsAssignment_9_3");
					put(grammarAccess.getCommandRestAccess().getOutputFormatsAssignment_9_4_1(), "rule__CommandRest__OutputFormatsAssignment_9_4_1");
					put(grammarAccess.getCommandRestAccess().getDescriptionAssignment_10_2(), "rule__CommandRest__DescriptionAssignment_10_2");
					put(grammarAccess.getCommandRestAccess().getParametersAssignment_11_3(), "rule__CommandRest__ParametersAssignment_11_3");
					put(grammarAccess.getCommandRestAccess().getParametersAssignment_11_4_1(), "rule__CommandRest__ParametersAssignment_11_4_1");
					put(grammarAccess.getCommandRestAccess().getResponseAssignment_12_3(), "rule__CommandRest__ResponseAssignment_12_3");
					put(grammarAccess.getCommandRestAccess().getResponseAssignment_12_4_1(), "rule__CommandRest__ResponseAssignment_12_4_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
					put(grammarAccess.getParameterAccess().getTypeAssignment_5(), "rule__Parameter__TypeAssignment_5");
					put(grammarAccess.getParameterAccess().getCommentAssignment_6_2(), "rule__Parameter__CommentAssignment_6_2");
					put(grammarAccess.getResponseAccess().getCodeAssignment_0(), "rule__Response__CodeAssignment_0");
					put(grammarAccess.getResponseAccess().getDescriptionAssignment_2_2(), "rule__Response__DescriptionAssignment_2_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RipDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RipDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
