/*
 * generated by Xtext 2.12.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.services.RipDSLGrammarAccess;
import restInPeace.APIRest;
import restInPeace.CommandRest;
import restInPeace.Response;
import restInPeace.RestInPeacePackage;

@SuppressWarnings("all")
public class RipDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RipDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestInPeacePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestInPeacePackage.API_REST:
				sequence_APIRest(context, (APIRest) semanticObject); 
				return; 
			case RestInPeacePackage.COMMAND_REST:
				sequence_CommandRest(context, (CommandRest) semanticObject); 
				return; 
			case RestInPeacePackage.PARAMETER:
				sequence_Parameter(context, (restInPeace.Parameter) semanticObject); 
				return; 
			case RestInPeacePackage.RESPONSE:
				sequence_Response(context, (Response) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     APIRest returns APIRest
	 *
	 * Constraint:
	 *     (host=EString port=EInt commands+=CommandRest+)
	 */
	protected void sequence_APIRest(ISerializationContext context, APIRest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandRest returns CommandRest
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         method=Method 
	 *         path=EString 
	 *         (entryFormats+=EString entryFormats+=EString*)? 
	 *         (outputFormats+=EString outputFormats+=EString*)? 
	 *         description=EString? 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (response+=Response response+=Response*)?
	 *     )
	 */
	protected void sequence_CommandRest(ISerializationContext context, CommandRest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=EString comment=EString?)
	 */
	protected void sequence_Parameter(ISerializationContext context, restInPeace.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Response returns Response
	 *
	 * Constraint:
	 *     (code=EInt description=EString?)
	 */
	protected void sequence_Response(ISerializationContext context, Response semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
