/*
 * generated by Xtext 2.12.0
 */
grammar InternalRipDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.RipDSLGrammarAccess;

}

@parser::members {

 	private RipDSLGrammarAccess grammarAccess;

    public InternalRipDSLParser(TokenStream input, RipDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "APIRest";
   	}

   	@Override
   	protected RipDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAPIRest
entryRuleAPIRest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAPIRestRule()); }
	iv_ruleAPIRest=ruleAPIRest
	{ $current=$iv_ruleAPIRest.current; }
	EOF;

// Rule APIRest
ruleAPIRest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAPIRestAccess().getAPIRestAction_0(),
					$current);
			}
		)
		otherlv_1='host'
		{
			newLeafNode(otherlv_1, grammarAccess.getAPIRestAccess().getHostKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getAPIRestAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAPIRestAccess().getHostEStringParserRuleCall_3_0());
				}
				lv_host_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAPIRestRule());
					}
					set(
						$current,
						"host",
						lv_host_3_0,
						"org.xtext.RipDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='port'
		{
			newLeafNode(otherlv_4, grammarAccess.getAPIRestAccess().getPortKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getAPIRestAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAPIRestAccess().getPortEIntParserRuleCall_6_0());
				}
				lv_port_6_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAPIRestRule());
					}
					set(
						$current,
						"port",
						lv_port_6_0,
						"org.xtext.RipDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='commands'
		{
			newLeafNode(otherlv_7, grammarAccess.getAPIRestAccess().getCommandsKeyword_7());
		}
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getAPIRestAccess().getColonKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAPIRestAccess().getCommandsCommandRestParserRuleCall_9_0());
				}
				lv_commands_9_0=ruleCommandRest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAPIRestRule());
					}
					add(
						$current,
						"commands",
						lv_commands_9_0,
						"org.xtext.RipDSL.CommandRest");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleCommandRest
entryRuleCommandRest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRestRule()); }
	iv_ruleCommandRest=ruleCommandRest
	{ $current=$iv_ruleCommandRest.current; }
	EOF;

// Rule CommandRest
ruleCommandRest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandRestAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRestRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.RipDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommandRestAccess().getColonKeyword_1());
		}
		otherlv_2='method'
		{
			newLeafNode(otherlv_2, grammarAccess.getCommandRestAccess().getMethodKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getCommandRestAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandRestAccess().getMethodMethodEnumRuleCall_4_0());
				}
				lv_method_4_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRestRule());
					}
					set(
						$current,
						"method",
						lv_method_4_0,
						"org.xtext.RipDSL.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='path'
		{
			newLeafNode(otherlv_5, grammarAccess.getCommandRestAccess().getPathKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getCommandRestAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandRestAccess().getPathEStringParserRuleCall_7_0());
				}
				lv_path_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRestRule());
					}
					set(
						$current,
						"path",
						lv_path_7_0,
						"org.xtext.RipDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8='entryFormats'
			{
				newLeafNode(otherlv_8, grammarAccess.getCommandRestAccess().getEntryFormatsKeyword_8_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getCommandRestAccess().getColonKeyword_8_1());
			}
			otherlv_10='-'
			{
				newLeafNode(otherlv_10, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_8_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandRestAccess().getEntryFormatsEStringParserRuleCall_8_3_0());
					}
					lv_entryFormats_11_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRestRule());
						}
						add(
							$current,
							"entryFormats",
							lv_entryFormats_11_0,
							"org.xtext.RipDSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12='-'
				{
					newLeafNode(otherlv_12, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_8_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandRestAccess().getEntryFormatsEStringParserRuleCall_8_4_1_0());
						}
						lv_entryFormats_13_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRestRule());
							}
							add(
								$current,
								"entryFormats",
								lv_entryFormats_13_0,
								"org.xtext.RipDSL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_14='outputFormats'
			{
				newLeafNode(otherlv_14, grammarAccess.getCommandRestAccess().getOutputFormatsKeyword_9_0());
			}
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getCommandRestAccess().getColonKeyword_9_1());
			}
			otherlv_16='-'
			{
				newLeafNode(otherlv_16, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_9_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandRestAccess().getOutputFormatsEStringParserRuleCall_9_3_0());
					}
					lv_outputFormats_17_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRestRule());
						}
						add(
							$current,
							"outputFormats",
							lv_outputFormats_17_0,
							"org.xtext.RipDSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_18='-'
				{
					newLeafNode(otherlv_18, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_9_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandRestAccess().getOutputFormatsEStringParserRuleCall_9_4_1_0());
						}
						lv_outputFormats_19_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRestRule());
							}
							add(
								$current,
								"outputFormats",
								lv_outputFormats_19_0,
								"org.xtext.RipDSL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_20='description'
			{
				newLeafNode(otherlv_20, grammarAccess.getCommandRestAccess().getDescriptionKeyword_10_0());
			}
			otherlv_21=':'
			{
				newLeafNode(otherlv_21, grammarAccess.getCommandRestAccess().getColonKeyword_10_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandRestAccess().getDescriptionEStringParserRuleCall_10_2_0());
					}
					lv_description_22_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRestRule());
						}
						set(
							$current,
							"description",
							lv_description_22_0,
							"org.xtext.RipDSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_23='parameters'
			{
				newLeafNode(otherlv_23, grammarAccess.getCommandRestAccess().getParametersKeyword_11_0());
			}
			otherlv_24=':'
			{
				newLeafNode(otherlv_24, grammarAccess.getCommandRestAccess().getColonKeyword_11_1());
			}
			otherlv_25='-'
			{
				newLeafNode(otherlv_25, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_11_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandRestAccess().getParametersParameterParserRuleCall_11_3_0());
					}
					lv_parameters_26_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRestRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_26_0,
							"org.xtext.RipDSL.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_27='-'
				{
					newLeafNode(otherlv_27, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_11_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandRestAccess().getParametersParameterParserRuleCall_11_4_1_0());
						}
						lv_parameters_28_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRestRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_28_0,
								"org.xtext.RipDSL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_29='response'
			{
				newLeafNode(otherlv_29, grammarAccess.getCommandRestAccess().getResponseKeyword_12_0());
			}
			otherlv_30=':'
			{
				newLeafNode(otherlv_30, grammarAccess.getCommandRestAccess().getColonKeyword_12_1());
			}
			otherlv_31='-'
			{
				newLeafNode(otherlv_31, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_12_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandRestAccess().getResponseResponseParserRuleCall_12_3_0());
					}
					lv_response_32_0=ruleResponse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRestRule());
						}
						add(
							$current,
							"response",
							lv_response_32_0,
							"org.xtext.RipDSL.Response");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_33='-'
				{
					newLeafNode(otherlv_33, grammarAccess.getCommandRestAccess().getHyphenMinusKeyword_12_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandRestAccess().getResponseResponseParserRuleCall_12_4_1_0());
						}
						lv_response_34_0=ruleResponse
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRestRule());
							}
							add(
								$current,
								"response",
								lv_response_34_0,
								"org.xtext.RipDSL.Response");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getNameKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.RipDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getTypeKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeEStringParserRuleCall_5_0());
				}
				lv_type_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"org.xtext.RipDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='description'
			{
				newLeafNode(otherlv_6, grammarAccess.getParameterAccess().getDescriptionKeyword_6_0());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getParameterAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getCommentEStringParserRuleCall_6_2_0());
					}
					lv_comment_8_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"comment",
							lv_comment_8_0,
							"org.xtext.RipDSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleResponse
entryRuleResponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResponseRule()); }
	iv_ruleResponse=ruleResponse
	{ $current=$iv_ruleResponse.current; }
	EOF;

// Rule Response
ruleResponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getCodeEIntParserRuleCall_0_0());
				}
				lv_code_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					set(
						$current,
						"code",
						lv_code_0_0,
						"org.xtext.RipDSL.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getResponseAccess().getColonKeyword_1());
		}
		(
			otherlv_2='description'
			{
				newLeafNode(otherlv_2, grammarAccess.getResponseAccess().getDescriptionKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getResponseAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getResponseAccess().getDescriptionEStringParserRuleCall_2_2_0());
					}
					lv_description_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getResponseRule());
						}
						set(
							$current,
							"description",
							lv_description_4_0,
							"org.xtext.RipDSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Rule Method
ruleMethod returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PUT'
			{
				$current = grammarAccess.getMethodAccess().getPUTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMethodAccess().getPUTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='POST'
			{
				$current = grammarAccess.getMethodAccess().getPOSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMethodAccess().getPOSTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='DELETE'
			{
				$current = grammarAccess.getMethodAccess().getDELETEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMethodAccess().getDELETEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='GET'
			{
				$current = grammarAccess.getMethodAccess().getGETEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMethodAccess().getGETEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='PATCH'
			{
				$current = grammarAccess.getMethodAccess().getPATCHEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMethodAccess().getPATCHEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
