/**
 * generated by Xtext 2.12.0
 */
package org.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.services.RipDSLGrammarAccess;
import restInPeace.APIRest;
import restInPeace.CommandRest;
import restInPeace.Parameter;
import restInPeace.Response;

@SuppressWarnings("all")
public class RipDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RipDSLGrammarAccess _ripDSLGrammarAccess;
  
  protected void _format(final APIRest aPIRest, @Extension final IFormattableDocument document) {
    EList<CommandRest> _commands = aPIRest.getCommands();
    for (final CommandRest commandRest : _commands) {
      document.<CommandRest>format(commandRest);
    }
  }
  
  protected void _format(final CommandRest commandRest, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = commandRest.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
    EList<Response> _response = commandRest.getResponse();
    for (final Response response : _response) {
      document.<Response>format(response);
    }
  }
  
  public void format(final Object aPIRest, final IFormattableDocument document) {
    if (aPIRest instanceof XtextResource) {
      _format((XtextResource)aPIRest, document);
      return;
    } else if (aPIRest instanceof APIRest) {
      _format((APIRest)aPIRest, document);
      return;
    } else if (aPIRest instanceof CommandRest) {
      _format((CommandRest)aPIRest, document);
      return;
    } else if (aPIRest instanceof EObject) {
      _format((EObject)aPIRest, document);
      return;
    } else if (aPIRest == null) {
      _format((Void)null, document);
      return;
    } else if (aPIRest != null) {
      _format(aPIRest, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(aPIRest, document).toString());
    }
  }
}
