/*
 * generated by text 2.12.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import restInPeace.APIRest
import restInPeace.CommandRest
import restInPeace.Method

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RipDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext ctx){
		
		fsa.generateFile(res.URI.trimFileExtension.appendFileExtension("js").lastSegment,
		res.allContents.filter(APIRest).toIterable.head.compile.toString)
		
	}
	
	def dispatch compile(APIRest api) '''
	var express = require('express');
	var app = express();
	
	«FOR command : api.commands»
		«command.compile»
	«ENDFOR»
	
	var server = app.listen(«api.port», '«api.host»', function () {
	})'''
	
	def dispatch compile(CommandRest cmd) '''
	/* «cmd.name» */
	app.«cmd.method.toLowerCase()»('«cmd.path»', function(req, res) {
		res.end("Ceci est la réponse de la commande «cmd.name»");
	})'''
	
	def String toLowerCase(Method method) {
		return method.toString().toLowerCase();
	}
	
}
