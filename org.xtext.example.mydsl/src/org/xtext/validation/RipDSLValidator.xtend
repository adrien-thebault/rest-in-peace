/*
 * generated by Xtext 2.12.0
 */
package org.xtext.validation

import restInPeace.*;
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.common.util.EList
import java.util.HashSet
import org.xtext.parser.antlr.RipDSLParser
import java.util.regex.Pattern

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RipDSLValidator extends AbstractRipDSLValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					RipDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def checkPathAndMethodsUnique(APIRest api) {
		val commands = api.commands;
		val commandList = new HashSet<String>();
		for(CommandRest c : commands){
			val string = c.path + c.method;
			if(commandList.contains(string)){
				error("Command with path "+c.path+" and method "+c.method+" is already defined ಠ_ಠ.", c, null, -1);
			} else {
				commandList.add(string);
			}
		}
	}
	
	@Check
	def checkPathParameter(CommandRest command) {
		var path = command.path;
		val matcher = Pattern.compile("/\\{(\\w+)\\}/?").matcher(path);
		while(matcher.find()){
			val parName = matcher.group(1);
			val set = new HashSet<String>();
			for(Parameter p : command.parameters){
				set.add(p.name);
			}
			
			if(!set.contains(parName)){
				error("Command with path "+command.path+" and method "+command.method+" has a parameter "+parName+" in the path which is not declared ಥ_ಥ .", command, null, -1);
			}
		}
	}
}
